--
-- FUNCTION GROUPS
--
let 
    send2 =
        void
        .roomunit ("{1 1 1 7 1 7 1}%8 " * "0.1") 0.9 ("{3 3 3 9 3 7 3}%8 "* "0.1")
        -- .delunit ("{1 1 1 7 1 7 1}%8" * 0.1) (1/8) 0.4
        .(#l "{1 1 0.2 1 0.7 1 0.3}")
        -- .(#l 0.3)
    send =
        void
        .roomunit 0.8 0.6 0.6
        .delunit 0.3 (3/16) 0.2
        -- .(#l "{1 1 0.2 1 0.7 1 0.3}%2")
    func1 =  
        void
        .whenmod 4 0 (
            void
            -- . jux (0.5 ~>)
            .stut' 2 (2/16) (
                    (# speed ("1" * "-1 1 1 2 1 1 -1.5 -1"))
                    .(|* gain 0.7)
                    .(|* l 0.5)
            )
        )
    func2 = 
        void
        .stut' 2 ("[4]/16") (
            void
            .jux ("0.25 <2 0.5>" ~> )
            .(|* speed (choose [-1 , 0.5] |*| "1 .. 2 "))
            .(|* gain ("0.1" * "9"))
            .(|* l 1)
            -- .(# cut 2)
        )
        -- .(# release "[1 .. 0.3]/2")
    func3 =
        void
        .(#crush "8 .. 4")
    masterPitch =
        (|+| nt "-5").
        (|+| nt "[0 [~ 12] 7 0]*2").
        slow 4.
        (|+| nt "<5 9 7 5>")
    fq' x
        | x > 80 = 80
        | otherwise = x
    fq :: Pattern Double -> Pattern Double
    fq i = (\x -> fq' x) <$> i
    filter ftype a rt =
        if ftype == "lpf"
            then (
                (#lpf ("[10 .. 1] * 1" * "[10 .. 1] * 1" * "[10 .. 1]" * (fq a) * rt))
                . (#lpq 0.2)
                . (#l 0.95)
            )     
            else (
                (#hpf ("[1 .. 10] * 1" * "[1 .. 10] * 1" * "[1 .. 10]" * (fq a) * rt))
                . (#hpq 0.2)
                . (#l 0.95)
            )
    

{--

let 
    -- fq :: Pattern Double-> Pattern Double
    fq' x
        | x > 100 = 100
        | otherwise = x
    --filter ftype a rt =
    --filter :: Pattern Double -> Pattern Double -> Pattern Double -> ControlPattern   
    fq:: Pattern Double -> Pattern Double
    fq i = (\x -> fq x) <$> i
--}


hush


d1 
    $ every (2) (
        jux (fast (sine+(saw*2)))
    )
    $ filter "lpf" 40"2/16" 
    $   stack[fast 2 $ "bd ~ [~ bd] bd","[~ oc]*4","msg*8"] 
    # gain (tri*2+saw*4)*0.9 
    # speed "<[1 .. 4] [1 .. 4]*-1>"



fq 23

fq 1000

:t l